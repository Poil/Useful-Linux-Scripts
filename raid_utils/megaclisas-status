#!/usr/bin/python

import os
import re
import sys
import socket
import commands

# START OF CONFIG
binarypath="/usr/sbin/megacli"
nscapath="/usr/sbin/send_nsca"
nagioshost="192.168.229.4"
nscacfg="/etc/send_nsca.cfg"
alarmname='raid'
# END OF CONFIG

if len(sys.argv) > 2:
    print 'Usage: megaclisas-status [--nagios] [--nsca]'
    sys.exit(1)

nagiosmode=False
nscamode=False
nagiosoutput=''
nagiosgoodarray=0
nagiosbadarray=0
nagiosgooddisk=0
nagiosbaddisk=0

# Check command line arguments to enable nagios or not
if len(sys.argv) > 1:
    if sys.argv[1] == '--nagios':
        nagiosmode=True
    elif sys.argv[1] == '--nsca':
        nscamode=True
    else:
        print 'Usage: megaclisas-status [--nagios] [--nsca]'
        sys.exit(1)

# Check binary exists (and +x), if not print an error message
# or return UNKNOWN nagios error code
if os.path.exists(binarypath) and os.access(binarypath, os.X_OK):
    pass
else:
    if nagiosmode:
        print 'UNKNOWN - Cannot find '+binarypath
    else:
        print 'Cannot find '+binarypath+'. Please install it.'
    sys.exit(3)

if nscamode == True:
    if os.path.exists(nscapath) and os.access(nscapath, os.X_OK):
        nscacmd = ("%s -H %s -c %s -d ';'" % (nscapath, nagioshost, nscacfg))
        if socket.gethostname().find('.')>=0:
            hostname=socket.gethostname().split('.')[0]
        else:
            hostname=socket.gethostname()
        pass
    else:
        print 'Cannot find '+nscapath+'. Please install it.'
        sys.exit(3)


# Get command output
def getOutput(cmd):
    output = os.popen(cmd)
    lines = []
    for line in output:
        if not re.match(r'^$',line.strip()):
            lines.append(line.strip())
    return lines

def returnControllerNumber(output):
    for line in output:
        if re.match(r'^Controller Count.*$',line.strip()):
            return int(line.split(':')[1].strip().strip('.'))

def returnControllerModel(output):
    for line in output:
        if re.match(r'^Product Name.*$',line.strip()):
            return line.split(':')[1].strip()

def returnArrayNumber(output):
    i = 0
    for line in output:
        if re.match(r'^Number of Virtual (Disk|Drive).*$',line.strip()):
            i = line.strip().split(':')[1].strip()
    return i

def returnBBUInfo(output):
    bbutype = None
    bbustate = "Unknown"
    bbuvoltage = "Unknown"
    bbutemp = "Unknown"
    bbumissing = "Unknown"
    bburplrq = "Unknown"
    bbuovertemp = "Unknown"
    bbuoverchg = "Unknown"

    for line in output:
        if re.match(r'^BatteryType\s*:\s*.+$',line.strip()):
            bbutype =  line.strip().split(':')[1].strip()
        if re.match(r'^Battery State\s*:\s*.+$',line.strip()):
            bbustate = line.strip().split(':')[1].strip()
        # One line says Voltage: OK, another one Voltage: NNNN mV
        if re.match(r'^Voltage\s*:\s*.+$',line.strip()) and not re.match(r'^.*[0-9]+ mV$',line.strip()):
            bbuvoltage = line.strip().split(':')[1].strip()
        # Same issue as Voltage
        if re.match(r'^Temperature\s*:\s*.+$',line.strip()) and not re.match(r'^.*[0-9]+ C$',line.strip()):
            bbutemp = line.strip().split(':')[1].strip()
        if re.match(r'^Battery Pack Missing\s*:\s*.+$',line.strip()):
            bbumissing = line.strip().split(':')[1].strip()
        if re.match(r'^Battery Replacement required\s*:\s*.+$',line.strip()):
            bburplrq = line.strip().split(':')[1].strip()
        if re.match(r'^Over Temperature\s*:\s*.+$',line.strip()):
            bbuovertemp = line.strip().split(':')[1].strip()
        if re.match(r'^Over Charged\s*:\s*.+$$',line.strip()):
            bbuoverchg = line.strip().split(':')[1].strip()
        if re.match(r'^Learn Cycle Active\s*:\s*.+$',line.strip()):
            if line.strip().split(':')[1].strip() == "Yes":
                bbustate = 'Learning in progress'
    if bbutype:
        return {'type': bbutype, 'state':bbustate, 'voltage':bbuvoltage, 'temp':bbutemp, 'missing':bbumissing, 'rplrq':bburplrq, 'overtemp':bbuovertemp, 'overchg':bbuoverchg}
    else:
        return None

def returnArrayInfo(output,controllerid,arrayid):
    id = 'c'+str(controllerid)+'u'+str(arrayid)
    operationlinennumber = False
    linenumber = 0

    for line in output:
        if re.match(r'Number Of Drives\s*((per span))?:.*[0-9]+$',line.strip()):
            ldpdcount = line.split(':')[1].strip()
        if re.match(r'Span Depth *:.*[0-9]+$',line.strip()):
            spandepth = line.split(':')[1].strip()
        if re.match(r'^RAID Level\s*:.*$',line.strip()):
            raidlevel = line.strip().split(':')[1].split(',')[0].split('-')[1].strip()
            type = 'RAID' + raidlevel
        if re.match(r'^Size\s*:.*$',line.strip()):
            # Size reported in MB
            if re.match(r'^.*MB$',line.strip().split(':')[1]):
                size = line.strip().split(':')[1].strip('MB').strip()
                size = str(int(round((float(size) / 1000))))+'G'
            # Size reported in TB
            elif re.match(r'^.*TB$',line.strip().split(':')[1]):
                size = line.strip().split(':')[1].strip('TB').strip()
                size = str(int(round((float(size) * 1000))))+'G'
            # Size reported in GB (default)
            else:
                size = line.strip().split(':')[1].strip('GB').strip()
                size = str(int(round((float(size)))))+'G'
        if re.match(r'^State\s*:.*$',line.strip()):
            state = line.strip().split(':')[1].strip()
        if re.match(r'^Ongoing Progresses\s*:.*$',line.strip()):
            operationlinennumber = linenumber
        linenumber += 1
        if operationlinennumber:
            inprogress = output[operationlinennumber+1]
        else:
            inprogress = 'None'

    if ldpdcount and (int(spandepth) > 1):
        ldpdcount = int(ldpdcount) * int(spandepth)
        if int(raidlevel) < 10:
            type = type + "0"

    return {'id':id, 'type':type, 'size':size, 'state':state, 'inprogress':inprogress}

def returnDiskInfo(output,controllerid):
    arrayid = False
    diskid = False
    table = []
    state = 'undef'
    model = 'undef'
    for line in output:
        if re.match(r'^Virtual (Disk|Drive): [0-9]+.*$',line.strip()):
            arrayid = line.split('(')[0].split(':')[1].strip()
        if re.match(r'Firmware state: .*$',line.strip()):
            state = line.split(':')[1].strip()
        if re.match(r'Inquiry Data: .*$',line.strip()):
            model = line.split(':')[1].strip()
            model = re.sub(' +', ' ', model)
        if re.match(r'PD: [0-9]+ Information.*$',line.strip()):
            diskid = line.split()[1].strip()

        if arrayid != False and state != 'undef' and model != 'undef' and diskid != False:
            table.append([str(arrayid), str(diskid), state, model])
            state = 'undef'
            model = 'undef'

    return table

cmd = binarypath+' -adpCount -NoLog'
output = getOutput(cmd)
controllernumber = returnControllerNumber(output)

bad = False
critical = False

# List available controller
if not nagiosmode and not nscamode:
    print '-- Controller informations --'
    print '-- %4s | %5s ' % ('ID','Model')
    controllerid = 0
    while controllerid < controllernumber:
        cmd = binarypath+' -AdpAllInfo -a'+str(controllerid)+' -NoLog'
        output = getOutput(cmd)
        controllermodel = returnControllerModel(output)
        print '%7s | %s ' % ('c'+str(controllerid),controllermodel)
        controllerid += 1
    print ''

# List BBU controller
if not nagiosmode and not nscamode:
    print '-- BBU informations --'
    print '-- %4s | %21s | %7s | %11s | %7s | %20s | %16s | %12s ' % ('ID','Status','Voltage','Temperature','Missing','Replacement Required','Over Temperature','Over Charged')

bbumsg=""
controllerid = 0
while controllerid < controllernumber:
    cmd = binarypath+' -AdpBbuCmd -a'+str(controllerid)+' -NoLog'
    output = getOutput(cmd)
    bbustatus = returnBBUInfo(output)
    
    # None returned if no BBU found
    if bbustatus:
        if not nagiosmode and not nscamode:
            print '%7s | %21s | %7s | %11s | %7s | %20s | %16s | %12s ' % ('c'+str(controllerid)+'b0',bbustatus['state'],bbustatus['voltage'],bbustatus['temp'],bbustatus['missing'],bbustatus['rplrq'],bbustatus['overtemp'],bbustatus['overchg'])

        bbumsg+='Status: '+bbustatus['state']+', '
        bbumsg+='Voltage: '+bbustatus['voltage']+', '
        bbumsg+='Temperature: '+bbustatus['temp']+', '
        bbumsg+='Missing: '+bbustatus['missing']+', '
        bbumsg+='Replacement Rq: '+bbustatus['rplrq']+', '
        bbumsg+='Over Temperature: '+bbustatus['overtemp']+', '
        bbumsg+='Over Charged: '+bbustatus['overchg']

        if bbustatus['state'] != 'Operational':
            bad=True
        if bbustatus['voltage'] != 'OK':
            bad=True
        if bbustatus['temp'] != 'OK':
            bad=True
        if bbustatus['missing'] != 'No':
            bad=True
        if bbustatus['rplrq'] != 'No':
            bad=True
        if bbustatus['overtemp'] != 'No':
            bad=True
        if bbustatus['overchg'] != 'No':
            bad=True

    controllerid += 1

if not nagiosmode and not nscamode:
    print ''

controllerid = 0
if not nagiosmode and not nscamode:
    print '-- Arrays informations --'
    print '-- %4s | %6s | %6s | %8s | %11s' % ('ID','Type','Size','Status','InProgress')

while controllerid < controllernumber:
    arrayid = 0
    cmd = binarypath+' -LdGetNum -a'+str(controllerid)+' -NoLog'
    output = getOutput(cmd)
    arraynumber = returnArrayNumber(output)
    while arrayid < int(arraynumber):
        cmd = binarypath+' -LDInfo -l'+str(arrayid)+' -a'+str(controllerid)+' -NoLog'
        output = getOutput(cmd)
        arrayinfo = returnArrayInfo(output,controllerid,arrayid)
        if not nagiosmode and not nscamode:
            print ' %6s | %6s | %6s | %8s | %11s' % ( arrayinfo['id'],arrayinfo['type'],arrayinfo['size'],arrayinfo['state'],arrayinfo['inprogress'])
        if not arrayinfo['state'] == 'Optimal':
            bad = True
            critical = True
            nagiosbadarray=nagiosbadarray+1
        else:
            nagiosgoodarray=nagiosgoodarray+1
        arrayid += 1
    controllerid += 1

if not nagiosmode and not nscamode:
    print ''

if not nagiosmode and not nscamode:
    print '-- Disks informations'
    print '-- %4s | %20s | %8s' % ('ID','Status','Model')

controllerid = 0
while controllerid < controllernumber:
    arrayid = 0
    cmd = binarypath+' -LDInfo -lall -a'+str(controllerid)+' -NoLog'
    output = getOutput(cmd)
    cmd = binarypath+' -LdPdInfo -a'+str(controllerid)+' -NoLog'
    output = getOutput(cmd)
    arraydisk = returnDiskInfo(output,controllerid)
    for array in arraydisk:
        if not array[2] in ['Online', 'Online, Spun Up', 'Online, Spun down']:
            bad=True
            critical=True
            nagiosbaddisk=nagiosbaddisk+1
        else:
            nagiosgooddisk=nagiosgooddisk+1
        if not nagiosmode and not nscamode:
            print ' %6s | %20s | %s' % ( 'c'+str(controllerid)+'u'+array[0]+'p'+array[1],array[2],array[3])
    controllerid += 1

if bad:
   returncode=1
   if critical:
      returncode=2
else:
   returncode=0

if nagiosmode:
    if bad:
        print 'RAID ERROR - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + ' - BBU: '+ bbumsg
        sys.exit(returncode)
    else:
        print 'RAID OK - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + ' - BBU: '+ bbumsg
elif nscamode:
    if bad:
        output='RAID ERROR - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + ' - BBU: '+ bbumsg
        msg=("'%s;%s;%s;%s\n'" % (hostname, alarmname, returncode, output))
        status = commands.getstatusoutput('echo %s | %s' % (msg, nscacmd))
        sys.exit(0)
    else:
        output='RAID OK - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + ' - BBU: '+ bbumsg
        msg=("'%s;%s;%s;%s\n'" % (hostname, alarmname, 0, output))
        status = commands.getstatusoutput('echo %s | %s' % (msg, nscacmd))
        sys.exit(0)
else:
    if bad:
        print '\nThere is at least one disk/array/bbu in a NOT OPTIMAL state.'
        sys.exit(returncode)
