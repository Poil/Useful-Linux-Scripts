#!/usr/bin/python

import os
import re
import sys
import commands
import socket

# START OF CONFIG
binarypath = "/usr/sbin/arcconf"
nscapath ="/usr/bin/send_nsca"
nagioshost="192.168.229.4"
nscacfg="/etc/icinga/send_nsca.cfg"
alarmname='raid'
# END OF CONFIG

if len(sys.argv) > 2:
    print 'Usage: aacraid-status [-d] [--nagios] [--nsca]'
    sys.exit(1)

printarray = True
printcontroller = True
nagiosmode=False
nscamode=False
nagiosoutput=''
nagiosgoodarray=0
nagiosbadarray=0
nagiosgooddisk=0
nagiosbaddisk=0
nagiosgoodbbu=0
nagiosbadbbu=0

bad = False
badBBU = False

if len(sys.argv) > 1:
    if sys.argv[1] == '-d':
        printarray = False
        printcontroller = False
    elif sys.argv[1] == '--nagios':
        nagiosmode=True
    elif sys.argv[1] == '--nsca':
        nscamode=True
    else:
        print 'Usage: aacraid-status [-d] [--nagios] [--nsca]'
        sys.exit(1)

# Check binary exists (and +x), if not print an error message
# or return UNKNOWN nagios error code
if os.path.exists(binarypath) and os.access(binarypath, os.X_OK):
    pass
else:
    if nagiosmode:
        print 'UNKNOWN - Cannot find '+binarypath
    else:
        print 'Cannot find '+binarypath+'. Please install it.'
    sys.exit(3)

if nscamode == True:
    if os.path.exists(nscapath) and os.access(nscapath, os.X_OK):
        nscacmd = ("%s -H %s -c %s -d ';'" % (nscapath, nagioshost, nscacfg))
        if socket.gethostname().find('.')>=0:
            hostname=socket.gethostname().split('.')[0]
        else:
            hostname=socket.gethostname()
        pass
    else:
        print 'Cannot find '+nscapath+'. Please install it.'
        sys.exit(3)



# Get command output
def getOutput(cmd):
    output = os.popen(cmd+' 2>/dev/null')
    lines = []
    for line in output:
        if not re.match(r'^$',line.strip()):
            lines.append(line.strip())
    return lines

def returnControllerNumber(output):
    for line in output:
        if re.match(r'^Controllers found: [0-9]+$',line.strip()):
            return int(line.split(':')[1].strip().strip('.'))

def returnControllerModel(output):
    for line in output:
        if re.match(r'^Controller Model.*$',line.strip()):
            return line.split(':')[1].strip()

def returnControllerStatus(output):
    for line in output:
        if re.match(r'^Controller Status.*$',line.strip()):
            return line.split(':')[1].strip()

def returnBBUStatus(output):
    BBUStatus=""
    BBUOverTemp=""
    for line in output:
        if re.match(r'^Status.*$',line.strip()):
            BBUStatus = line.split(':')[1].strip()
        if re.match(r'^Over temperature.*$',line.strip()):
            BBUOverTemp = line.split(':')[1].strip()
    return [BBUStatus, BBUOverTemp]


def returnArrayIds(output):
    ids = []
    for line in output:
        if re.match(r'^Logical (device|drive) number [0-9]+$',line.strip()):
            ids.append(line.strip('Logical device number').strip())
    return ids

def returnArrayInfo(output):
    members = []
    for line in output:
        # RAID level may be either N or Simple_Volume
        # (a disk connected to the card, not hotspare, not part of any array)
        if re.match(r'^RAID level\s+: .+$',line.strip()):
            type = line.split(':')[1].strip()
        if re.match(r'^Status of logical (device|drive)\s+: .*$',line.strip()):
            status = line.split(':')[1].strip()
        if re.match(r'^Size\s+: [0-9]+ MB$',line.strip()):
            size = str(int(line.strip('MB').split(':')[1].strip()) / 1000)
        if re.match(r'^(Group\s[0-9]+,\s)?Segment [0-9]+\s+: .*$',line.strip()):
            splitter = re.compile('(\(.*\))')
            # The line can be either
            # Segment 0 : Present (Controller:1,Enclosure:0,Slot:0) JPW9J0N00RWMUV
            # Or
            # Segment 0 : Present (Controller:1,Channel:0,Device:0) S13PJ1CQ719255
            # Or
            # Segment 0 : Present (Controller:1,Connector:1,Device:2) 9QJ7D0MJ
            line = re.sub('Controller:','',line)
            line = re.sub('(Channel|Enclosure|Connector):','',line)
            line = re.sub('(Device|Slot):','',line)
            line = line.split(':')[1]
            if re.match(r'^ Missing',line):
                members.append('?,?')
            else:
                members.append(splitter.split(line)[1].strip('(').strip(')'))
        if re.match(r'^Group [0-9], Segment [0-9]+\s+: .*$',line.strip()):
            splitter = re.compile('(\(.*\))')
            line = line.split(':')[1]
            if re.match(r'^Missing',line):
                members.append('?,?')
            else:
                members.append(splitter.split(line)[1].strip('(').strip(')'))
        #if re.match(r'^Stripe order \(Channel,Device\)\s+: .*$',line.strip()):
            #line = line.split(':')[1]
            #members = (line.split())
        #if len(members)==0:
            #members.append('0,0')
    return [type,status,size,members]

def returnControllerTasks(output):
    arrayid = False
    type = False
    state = False
    tasks = []
    for line in output:
        if re.match(r'^Logical device\s+: [0-9]+$',line.strip()):
            arrayid = line.split(':')[1].strip()
        if re.match(r'^Current operation\s+: .*$',line.strip()):
            type = line.split(':')[1].strip()
        if re.match(r'^Percentage complete\s+: [0-9]+$',line.strip()):
            state = line.split(':')[1].strip()
        if arrayid != False and type != False and state != False:
            tasks.append([arrayid,type,state])
            arrayid = False
            type = False
            state = False
    return tasks

def returnDisksInfo(output,controllerid):
    diskid = False
    vendor = False
    model = False
    state = False
    disks = []
    for line in output:
        if re.match(r'^Reported Channel,Device(\(T:L\))?\s+: [0-9]+,[0-9]+(\([0-9]+:[0-9]+\))?$',line.strip()):
            diskid = re.split('\s:\s',line)[1].strip()
            diskid = re.sub('\(.*\)','',diskid)
            diskid = str(controllerid)+','+diskid
        if re.match(r'^State\s+: .*$',line.strip()):
            state = line.split(':')[1].strip()
        if re.match(r'^Vendor\s+: .*$',line.strip()):
            vendor = line.split(':')[1].strip()
        if re.match(r'^Model\s+: .*$',line.strip()):
            model = line.split(':')[1].strip()
        if diskid != False and vendor != False and model != False and state != False:
            disks.append([diskid,state,vendor,model])
            diskid = False
            vendor = False
            model = False
            state = False
    return disks

cmd = binarypath+' GETVERSION'
output = getOutput(cmd)
controllernumber = returnControllerNumber(output)

# List controllers
if printcontroller :
    controllerid = 1
    while controllerid <= controllernumber:
        cmd = binarypath +' GETCONFIG '+str(controllerid)+' AD'
        output = getOutput(cmd)
        controllermodel = returnControllerModel(output)
        controllerstatus = returnControllerStatus(output)
	bbustatus  = returnBBUStatus(output)
        if controllerid == 1:
            if not nagiosmode and not nscamode:
                print '-- Controller informations --'
                if bbustatus[0] != 'Not Installed':
                    print '-- %2s | %24s | %12s | %10s' % ('ID','Model','Ctrl Status','BBU Status')
                else:
                    print '-- %2s | %24s | %12s' % ('ID','Model','Ctrl Status')

        if controllerstatus != 'Optimal' and controllerstatus != 'Okay':
            bad = True
            nagiosbadarray=nagiosbadarray+1
        else:
            nagiosgoodarray=nagiosgoodarray+1

        if bbustatus[0] != 'Not Installed':
            if bbustatus[0] != 'Optimal' and bbustatus[0] != 'Okay' and bbustatus[1] != 'No' :
                badBBU = True
                bad = True
                nagiosbadbbu=nagiosbadbbu+1
            else:
                nagiosgoodbbu=nagiosgoodbbu+1
        
            if badBBU == True :
                BBUstatus = "Bad"
            else :
                BBUstatus = "Okay"

        if not nagiosmode and not nscamode:
            if bbustatus[0] != 'Not Installed':
                print '%5s | %24s | %12s | %10s' % ('c'+str(controllerid-1),controllermodel,controllerstatus,BBUstatus)
            else:
                print '%5s | %24s | %12s' % ('c'+str(controllerid-1),controllermodel,controllerstatus)
        
        controllerid += 1

    if bbustatus[0] != 'Not Installed':
       bbumsg=' - BBU : '+BBUstatus
    else:
       bbumsg=''

    if not nagiosmode and not nscamode:
        print ''

# List arrays
if printarray:
    controllerid = 1
    if not nagiosmode and not nscamode:
        print '-- Arrays informations --'
        print '-- %2s | %6s | %6s | %8s | %10s | %4s' % ('ID','Type','Size','Status','Task','Progress')
        #print '-- ID | Type | Size | Status | Task | Progress'
    while controllerid <= controllernumber:
        arrayid = 0
        cmd = binarypath +' GETCONFIG '+str(controllerid)
        output = getOutput(cmd)
        arrayids = returnArrayIds(output)
        for arrayid in arrayids:
            cmd = binarypath +' GETCONFIG '+str(controllerid)+' LD '+str(arrayid)
            output = getOutput(cmd)
            arrayinfo = returnArrayInfo(output)
            if arrayinfo[1] != 'Optimal' and arrayinfo[1] != 'Okay':
                bad = True
            cmd = binarypath +' GETSTATUS '+str(controllerid)
            output = getOutput(cmd)
            tasksinfo = returnControllerTasks(output)
            done = False
            # Usually it should return either [0-9] or Simple_Volume but...
            # It can also return "6 Reed-Solomon" so we need to handle this too...
            # So let's match [0-9] followed by a space or EOL.
            if re.match('^[0-9]+(\s|$)',arrayinfo[0]):
                raidtype = re.sub('^','RAID',arrayinfo[0])
            else:
                raidtype = arrayinfo[0]
            for tasks in tasksinfo:
                if int(tasks[0]) == int(arrayid):
                    if not nagiosmode and not nscamode:
                        print '%5s | %6s | %6s | %8s | %10s | %4s' % ('c'+str(controllerid-1)+'u'+str(arrayid),raidtype,arrayinfo[2],arrayinfo[1],tasks[1],tasks[2]+'%')
                    done = True
                    break
            if done == False:
                if not nagiosmode and not nscamode:
                    print '%5s | %6s | %6s | %8s | %10s | %4s' % ('c'+str(controllerid-1)+'u'+str(arrayid),raidtype,arrayinfo[2],arrayinfo[1],'','')
        controllerid += 1
    if not nagiosmode and not nscamode:
        print ''

# List disks
controllerid = 1
if not nagiosmode and not nscamode:
    print '-- Disks informations'
    print '-- %3s | %8s | %20s' % ('ID','Status','Model')
while controllerid <= controllernumber:
    arrayid = 0
    cmd = binarypath +' GETCONFIG '+str(controllerid)
    output = getOutput(cmd)
    arrayids = returnArrayIds(output)
    for arrayid in arrayids:
        cmd = binarypath +' GETCONFIG '+str(controllerid)+' LD '+str(arrayid)
        output = getOutput(cmd)
        arrayinfo = returnArrayInfo(output)
        cmd = binarypath +' GETCONFIG '+str(controllerid)+' PD'
        output = getOutput(cmd)
        diskinfo = returnDisksInfo(output,controllerid)
        if len(arrayinfo[3])>0:
            for member in arrayinfo[3]:
                i = 0
                for disk in diskinfo:
                    if disk[1] != 'Online' and disk[1] != 'Hot Spare' and disk[1] != 'Ready':
                        nagiosbaddisk=nagiosbaddisk+1
                        bad = True
                    else:
                        nagiosgooddisk=nagiosgooddisk+1
                    if disk[0] == member:
                        if not nagiosmode and not nscamode:
                            print '%6s | %8s | %s' % ('c'+str(controllerid-1)+'u'+str(arrayid)+'d'+str(i),disk[1],disk[2]+' '+disk[3])
                    i += 1
        else:
            i = 0
            for disk in diskinfo:
                if disk[1] != 'Online' and disk[1] != 'Hot Spare' and disk[1] != 'Ready':
                    nagiosbaddisk=nagiosbaddisk+1
                    bad = True
                else:
                    nagiosgooddisk=nagiosgooddisk+1
                if not nagiosmode and not nscamode:
                    print '%6s | %8s | %s' % ('c'+str(controllerid-1)+'u'+str(arrayid)+'d'+str(i),disk[1],disk[2]+' '+disk[3])
                i += 1
    controllerid += 1


if nagiosmode:
    if bad:
        print 'RAID ERROR - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + bbumsg
        sys.exit(2)
    else:
        print 'RAID OK - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + bbumsg
elif nscamode:
    if bad:
        output='RAID ERROR - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + bbumsg
        msg=("'%s;%s;%s;%s\n'" % (hostname, alarmname, 1, output))
        status = commands.getstatusoutput('echo %s | %s' % (msg, nscacmd))
        sys.exit(status)
    else:
        output='RAID OK - Arrays: OK:'+str(nagiosgoodarray)+' Bad:'+str(nagiosbadarray)+' - Disks: OK:'+str(nagiosgooddisk)+' Bad:'+str(nagiosbaddisk) + bbumsg
        msg=("'%s;%s;%s;%s\n'" % (hostname, alarmname, 0, output))
        status = commands.getstatusoutput('echo %s | %s' % (msg, nscacmd))
        sys.exit(status)
else:
    if bad:
        print '\nThere is at least one disk/array in a NOT OPTIMAL state.'
        print '\nUse "arcconf GETCONFIG [1-9]" to get details.'
    sys.exit(1)
